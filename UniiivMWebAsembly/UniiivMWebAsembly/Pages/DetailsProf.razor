@page "/professor-details/{ProfessorId}"
@using UniiivMWebAsembly.Services
@using UniiivMWebAsembly.Entities
@inject ProfessorService ProfessorService

<h3>Professor Details</h3>



@if (errorMessage != null)
{
    <p class="text-danger">@errorMessage</p>
}
else if (professor != null)
{
    <dl class="row">
        <dt class="col-sm-2">
            ID:
        </dt>
        <dd class="col-sm-10">
            @professor.ProfessorId
        </dd>
        <dt class="col-sm-2">
            Name:
        </dt>
        <dd class="col-sm-10">
            @professor.Name
        </dd>
        <!-- Ajoutez d'autres détails ici -->
    </dl>
}
else
{
    <p><em>Loading...</em></p>
}

@code {
    [Parameter]
    public string ProfessorId { get; set; }

    private int parsedProfessorId;
    private Professor professor;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        if (int.TryParse(ProfessorId, out parsedProfessorId))
        {
            // Si la conversion est réussie, procédez à la récupération des données du professeur
            try
            {
                professor = await ProfessorService.GetProfessorAsync(parsedProfessorId);
                if (professor == null)
                {
                    errorMessage = $"Professor with ID {parsedProfessorId} not found.";
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"An error occurred while trying to get professor details: {ex.Message}";
            }
        }
        else
        {
            // Si la conversion échoue, affichez un message d'erreur
            errorMessage = "The provided professor ID is not valid.";
        }
    }
}
