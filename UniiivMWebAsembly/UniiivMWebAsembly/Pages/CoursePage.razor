@page "/courses"

@inject IJSRuntime JSRuntime;

@using UniiivMWebAsembly.Services
@using UniiivMWebAsembly.Entities
@inject NavigationManager NavigationManager

@inject CourseService CourseService

<h2>List of Courses</h2>
<button class="btn btn-primary" @onclick="NavigateToAddCourse">Add Course</button>


@if (courses == null)
{
    <p><em>Loading...</em></p>
}
else if (courses.Count == 0)
{
    <p>No courses available.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Course ID</th>
                <th>Title</th>
                <th>Credits</th>
                <th />
            </tr>
        </thead>
        <tbody>
            @foreach (var course in courses)
            {
                <tr>
                    <td>@course.CourseId</td>
                    <td>@course.Title</td>
                    <td>@course.Credits</td>
                    <td>
                        <button class="btn btn-info" @onclick="() => ViewDetails(course.CourseId)">Details</button>
                        <button class="btn btn-primary" @onclick="() => EditCourse(course.CourseId)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteCourse(course.CourseId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Course> courses;

    protected override async Task OnInitializedAsync()
    {
        courses = await CourseService.GetCoursesAsync();
    }

    private void NavigateToAddCourse()
    {
        NavigationManager.NavigateTo("/add-course");
    }

    private void ViewDetails(int courseId)
    {
        NavigationManager.NavigateTo($"/course-details/{courseId}");
    }

    private void EditCourse(int courseId)
    {
        NavigationManager.NavigateTo($"/edit-course/{courseId}");
    }

    private async Task DeleteCourse(int courseId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete course {courseId}?");
        if (confirmed)
        {
            var response = await CourseService.DeleteCourseAsync(courseId);
            if (response.IsSuccessStatusCode)
            {
                courses = courses.Where(c => c.CourseId != courseId).ToList();
            }
        }
    }
}
